// helpers/telegram.js
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN || '7958971419:AAFT29lhSOLzoZcWIMXHz8vha_5z95tX37Q';
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || '5066230896';

/**
 * Env√≠a un mensaje a Telegram con formato Markdown
 * @param {string} text - Texto del mensaje (puede usar Markdown)
 * @param {string} chatId - ID del chat (opcional, usa el por defecto si no se especifica)
 * @returns {Promise<boolean>} - true si se envi√≥ exitosamente
 */
async function sendTelegramMessage(text, chatId = TELEGRAM_CHAT_ID) {
    try {
        const url = `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`;
        
        const payload = {
            chat_id: chatId,
            text: text,
            parse_mode: 'Markdown'
        };
        
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload)
        });
        
        if (response.ok) {
            console.log('‚úÖ Mensaje enviado a Telegram exitosamente');
            return true;
        } else {
            const errorData = await response.json();
            console.error('‚ùå Error al enviar mensaje a Telegram:', errorData);
            return false;
        }
    } catch (error) {
        console.error('‚ùå Error al enviar mensaje a Telegram:', error.message);
        return false;
    }
}

/**
 * Env√≠a c√≥digo OTP de verificaci√≥n de registro a Telegram
 * @param {string} code - C√≥digo OTP de 6 d√≠gitos
 * @param {string} phone - N√∫mero de tel√©fono del usuario (enmascarado)
 * @param {string} userName - Nombre del usuario
 * @returns {Promise<boolean>} - true si se envi√≥ exitosamente
 */
export async function sendOtpCode({ code, phone, userName }) {
    console.log('üöÄ sendOtpCode (Telegram) llamado con:', { code, phone, userName });
    console.log('üîë Configuraci√≥n Telegram:', {
        tokenExists: !!TELEGRAM_TOKEN,
        tokenLength: TELEGRAM_TOKEN?.length,
        tokenStart: TELEGRAM_TOKEN?.substring(0, 20) + '...',
        chatId: TELEGRAM_CHAT_ID
    });
    
    try {
        // Enmascarar el tel√©fono para privacidad
        const maskedPhone = phone ? phone.replace(/(\d{2})(\d{3})(\d{3})(\d{4})/, '$1 $2 XXX $4') : 'N/A';
        
        const text = [
            'üîê *C√ìDIGO DE VERIFICACI√ìN*',
            '',
            `üë§ *Usuario:* ${userName}`,
            `üì± *Tel√©fono:* ${maskedPhone}`,
            '',
            `üî¢ *Tu c√≥digo de verificaci√≥n es:*`,
            `\`${code}\``,
            '',
            '‚è∞ *Este c√≥digo expira en 10 minutos*',
            '',
            '‚ö†Ô∏è *Importante:*',
            '‚Ä¢ No compartas este c√≥digo con nadie',
            '‚Ä¢ Si no solicitaste este c√≥digo, ignora este mensaje',
            '‚Ä¢ El c√≥digo es v√°lido por una sola vez',
            '',
            '‚úÖ Ingresa este c√≥digo en la plataforma para completar tu registro'
        ].join('\n');

        console.log('üì§ Enviando mensaje a Telegram:', {
            chatId: TELEGRAM_CHAT_ID,
            textLength: text.length,
            code: code
        });

        const result = await sendTelegramMessage(text);
        console.log('‚úÖ Telegram OTP Response:', result);
        return result;
    } catch (error) {
        console.error('‚ùå Error en sendOtpCode (Telegram):', error);
        throw error;
    }
}

/**
 * Env√≠a c√≥digo OTP de recuperaci√≥n de contrase√±a a Telegram
 * @param {string} code - C√≥digo OTP de 6 d√≠gitos
 * @param {string} phone - N√∫mero de tel√©fono del usuario (enmascarado)
 * @param {string} userName - Nombre del usuario
 * @returns {Promise<boolean>} - true si se envi√≥ exitosamente
 */
export async function sendRecoveryOtp({ code, phone, userName }) {
    console.log('üöÄ sendRecoveryOtp (Telegram) llamado con:', { code, phone, userName });
    
    try {
        // Enmascarar el tel√©fono para privacidad
        const maskedPhone = phone ? phone.replace(/(\d{2})(\d{3})(\d{3})(\d{4})/, '$1 $2 XXX $4') : 'N/A';
        
        const text = [
            'üîë *RECUPERACI√ìN DE CONTRASE√ëA*',
            '',
            `üë§ *Usuario:* ${userName}`,
            `üì± *Tel√©fono:* ${maskedPhone}`,
            '',
            `üî¢ *Tu c√≥digo de recuperaci√≥n es:*`,
            `\`${code}\``,
            '',
            '‚è∞ *Este c√≥digo expira en 10 minutos*',
            '',
            '‚ö†Ô∏è *Importante:*',
            '‚Ä¢ No compartas este c√≥digo con nadie',
            '‚Ä¢ Si no solicitaste recuperar tu contrase√±a, ignora este mensaje',
            '‚Ä¢ El c√≥digo es v√°lido por una sola vez',
            '',
            '‚úÖ Ingresa este c√≥digo en la plataforma para restablecer tu contrase√±a'
        ].join('\n');

        const result = await sendTelegramMessage(text);
        console.log('‚úÖ Telegram Recovery OTP Response:', result);
        return result;
    } catch (error) {
        console.error('‚ùå Error en sendRecoveryOtp (Telegram):', error);
        throw error;
    }
}

/**
 * Env√≠a notificaci√≥n de nuevo registro a Telegram (para administradores)
 * @param {Object} user - Objeto del usuario registrado
 * @returns {Promise<boolean>} - true si se envi√≥ exitosamente
 */
export async function notifyNewRegistration(user) {
    try {
        const maskedPhone = user.phone ? user.phone.replace(/(\d{2})(\d{3})(\d{3})(\d{4})/, '$1 $2 XXX $4') : 'No proporcionado';
        
        const text = [
            'üë§ *NUEVO REGISTRO DE USUARIO*',
            '',
            `üìù *Nombre:* ${user.name} ${user.surname || ''}`,
            `‚úâÔ∏è *Email:* ${user.email}`,
            `üì± *Tel√©fono:* ${maskedPhone}`,
            `üé≠ *Rol:* ${user.rol}`,
            '',
            `üìÖ *Fecha de registro:* ${new Date(user.createdAt).toLocaleString('es-MX', { 
                timeZone: 'America/Mexico_City',
                dateStyle: 'full',
                timeStyle: 'short'
            })}`,
            '',
            'üîê *Estado:* Pendiente de verificaci√≥n OTP',
            '',
            'üëâ Revisa el dashboard para m√°s detalles'
        ].join('\n');

        return await sendTelegramMessage(text);
    } catch (error) {
        console.error('‚ùå Error al notificar nuevo registro:', error.message);
        return false;
    }
}

/**
 * Env√≠a notificaci√≥n de verificaci√≥n exitosa a Telegram (para administradores)
 * @param {Object} user - Objeto del usuario verificado
 * @returns {Promise<boolean>} - true si se envi√≥ exitosamente
 */
export async function notifySuccessfulVerification(user) {
    try {
        const maskedPhone = user.phone ? user.phone.replace(/(\d{2})(\d{3})(\d{3})(\d{4})/, '$1 $2 XXX $4') : 'No proporcionado';
        
        const text = [
            '‚úÖ *USUARIO VERIFICADO EXITOSAMENTE*',
            '',
            `üìù *Nombre:* ${user.name} ${user.surname || ''}`,
            `‚úâÔ∏è *Email:* ${user.email}`,
            `üì± *Tel√©fono:* ${maskedPhone}`,
            `üé≠ *Rol:* ${user.rol}`,
            '',
            `üìÖ *Fecha de verificaci√≥n:* ${new Date().toLocaleString('es-MX', { 
                timeZone: 'America/Mexico_City',
                dateStyle: 'full',
                timeStyle: 'short'
            })}`,
            '',
            'üéâ *Estado:* Cuenta activa y verificada',
            '',
            'üëâ El usuario ya puede acceder a la plataforma'
        ].join('\n');

        return await sendTelegramMessage(text);
    } catch (error) {
        console.error('‚ùå Error al notificar verificaci√≥n exitosa:', error.message);
        return false;
    }
}

export default {
    sendOtpCode,
    sendRecoveryOtp,
    notifyNewRegistration,
    notifySuccessfulVerification
};
