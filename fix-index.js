// Script temporal para limpiar el √≠ndice corrupto
// Ejecutar con: node fix-index.js
// Este archivo se puede eliminar despu√©s de ejecutarlo

import mongoose from 'mongoose';
import dotenv from 'dotenv';

dotenv.config();

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://127.0.0.1:27017/plataforma_cursos';

async function fixIndex() {
    try {
        console.log('üîå Conectando a MongoDB...');
        await mongoose.connect(MONGODB_URI);
        console.log('‚úÖ Conectado a MongoDB');

        const db = mongoose.connection.db;
        const coursesCollection = db.collection('courses');

        // Listar √≠ndices actuales
        console.log('\nüìã √çndices actuales:');
        const indexes = await coursesCollection.indexes();
        indexes.forEach(index => {
            console.log(`  - ${index.name}`);
        });

        // Intentar eliminar el √≠ndice corrupto
        console.log('\nüóëÔ∏è  Eliminando √≠ndice corrupto "search_text_index"...');
        try {
            await coursesCollection.dropIndex('search_text_index');
            console.log('‚úÖ √çndice "search_text_index" eliminado exitosamente');
        } catch (error) {
            if (error.code === 27 || error.codeName === 'IndexNotFound') {
                console.log('‚ö†Ô∏è  El √≠ndice no exist√≠a o ya fue eliminado');
            } else {
                throw error;
            }
        }

        // Listar √≠ndices despu√©s de eliminar
        console.log('\nüìã √çndices despu√©s de limpiar:');
        const indexesAfter = await coursesCollection.indexes();
        indexesAfter.forEach(index => {
            console.log(`  - ${index.name}`);
        });

        console.log('\n‚úÖ Limpieza completada. Ahora reinicia el servidor para recrear los √≠ndices correctamente.');
        
    } catch (error) {
        console.error('‚ùå Error:', error);
    } finally {
        await mongoose.connection.close();
        console.log('\nüîå Desconectado de MongoDB');
        process.exit(0);
    }
}

fixIndex();
